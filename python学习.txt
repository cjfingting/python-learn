1. 注释：
单行注释：# 快捷键ctrl+/
多行注释
'''
多行注释
'''

2.变量：可以发生改变的值
变量的命名规范：
  1.必须是字母或数字或下划线组成
  2.不能是数字开头或纯数字
  3.不要用中文
  4.不能用python关键字(if，for,while,break等)
  5.不要太长
  6.要有意义
  7.推荐使用下划线或驼峰命名
弱语言：变量命名的时候对数据类型不是很严格
格式：变量名 = 值
A,B,C = 1,2,3 多变量赋值，一般不建议这么用
A = B = C = 2

3.python代码可以随便点，不用加分号;python的数据类型不用明确写出来
  python代码的判断仅仅根据你代码放的位置
  如：只打印一次s
  i = 1
  s = 0
  while(i<=100):
      s = s + i
      i = i + 1
  print(s)
  打印100次s
  i = 1
  s = 0
  while(i<=100):
      s = s + i
      i = i + 1
      print(s)

4.常量
  1.所有字母都用大写，认为是常量(不存在决定意义的常量)

5.数据类型：用于区分不同的数据
数字（int,float） a = 10; b = 3.14;c = -1.5
文字（char） s = 'as' s = "sa" s = '''sss''' #多行字符串
+ 左右两边都是字符串，连接字符串
* 字符串*数字，标识字符串重复的次数
布尔（bool） True，False   a = True

6.最简单的用户交互
a = int(input('提示语')) #输入
input输入的数据一定是字符串
print("字符串",变量)
type(a) #用type展示变量类型
数据类型(变量)  #强制类型转换

7.条件判断
  if 条件1:
     代码1
  elif 条件2:
     代码2
  elif 条件3:
     代码3
  else:
     代码4

8.循环语句
while循环
     while 条件:
          循环代码
          if 条件:   ==用于判断左右是否相等
             break   跳出循环
             continue 终止当前本次循环，继续执行下一次循环
          循环代码
for循环
for 变量 in 可迭代的东西（整数，字符串，数组等）:
    循环代码
range(m,n,q):从m数到n，不包含n（m可省略，默认从0）,间隔为q（可省略，默认为1）

while True:（死循环）
    代码

9.pass 代码占位符，用于没想好时占位

10.缩进 tab健

11.多行语句  (换行要加\)(有括号括起来可以不加\)
d = a + \
    b + \
    c

12.引号
a = "123"  单行字符串
a = '123'  单行字符串
a = """    多行字符串
abc
abc
abc
"""

13.python转义符
\n:换行
\t:制表符
\r:覆盖
\b:删除
\:两个反斜线表示一个\
原字符：使转义字符不起作用，写在前面 用r或R
\+符号：表示是符号作用失效，只作为一个字符串 \"

14.数字运算
2//4 向下取整
7%3 取余
2**2 乘方结果

15。比较运算符
>,>=,<,<=,!=,==

16.and,or,not
and 与 or 或 not 非 配合True，False使用

17.空值 None 单独存在的数据类型
print内置函数返回值为None

18.字符串操作  字符串下标从0开始
切片：[开始:结尾:步长] 取左不娶右，用下标表示，都可省略，开始默认从0开始，结尾默认到尾，步长默认为1，开始结尾可为负数
str[-3:-1] 取倒数第三个到倒数第一个字符
str[-1] 取倒数第一个字符
str[0] 取第一个字符
str[:] 取全部
str[::-1] 反转字符串
str[-3:-1,6] 步长过长就会取切片后的第一个字符

字符串拼接：
str1 + str2
','.join((str1,str2)) 在字符串中添加,号拼接

字符串格式化： 将format的值填入前面的大括号，大括号可加下标，可省略，则跟后面一一对应填入；加下标则为定位填入
str = "大家好，我的名字是{0},今年{1}岁，性别{2}".format("haha","18","男")

find方法：查找第一次出现的字符串位置，找不到返回-1
str.find("要找的字符串",开始，结尾) 开始结尾可省略

count方法：统计字符串出现的次数，没有返回0
str.count("要计数的字符串",开始，结尾)

replace方法：将要替换的字符串替换成对应字符串
str.replace('要替换的片段','替换成的字符串',替换次数) 替换次数可省略，默认全部替换

lower,upper方法：
str.upper()
str.lower()

split方法：指定分割点对字符串进行分割，得到一个列表,分割点去掉
str.split("分割点",分割次数) 分割次数可省略，默认要全部分割

strip方法：去除首尾空格
str.strip() 去除首尾空格
str.strip("字符串") 去除首尾指定字符串

占位符：%s 任何数据 %d 整型 %f 浮点型
str = 'wo%sni' % 'ai'
str = 'wo%sni' % [2,3]
str = 'score is %d' % 100

F表达式：与format表达式可通用
name = 'haha'
age = '18'
sex = '男'
str = "大家好，我的名字是{0},今年{1}岁，性别{2}".format(name,age,sex)
str = f'大家好，我的名字是{name},今年{age}岁，性别{sex}'

len():字符串长度

format格式化输出：
print('money is {下标:.2f}'.format(浮点数1,浮点数2)  将浮点数保留两位小数输出，下标可省略，默认取第一个浮点数
print('money is {下标:.2%}'.format(浮点数1,浮点数2)  将浮点数保留两位小数按百分比格式输出，下标可省略，默认取第一个浮点数

字符串*数字n：将字符串重复n次
19.列表
# 定义列表：
list1 = [2,3,4,'www',[10,20,30]]
# 列表下标：从0开始
print(list1[i][j])  取列表中嵌套的列表的数据
# 列表长度：
print(len(list1))
# 列表更新值,重新赋值
list[i] = new

# 列表的操作
加法：两个列表合并成一个列表
乘法：列表*数字n；列表值重复n次

列表的切片取值
list1[初始:结尾:步长] 与字符串取值逻辑一样

del关键字：删除  在计算机内存中删除指定值
a = [1, 2, 3]
del a[i]  删除指定的值

append方法：在列表末尾添加元素
list.append(添加元素)

insert方法：
list.insert[位置,元素] 将元素插入到对应的位置

clear 清空列表
list.clear()

remove函数：
list.remove(要移除的元素) 只会移除第一个匹配到的值

pop函数：
list.pop(下标) 移除指定下标的值，返回要移除的值

index函数：返回匹配到的下标值 找不到会报错
list.index(要查找的元素，查找起始位置，查找结束位置)  起始位置，结束位置可以省略

reverse函数：列表反向排序

extend方法：在列表后添加另一个列表，将新添加的列表元素一个个加入到原列表
list.extend(列表)

copy函数：对原表操作不会对复制表产生影响
list1 = list2.copy()  复制一份列表
list1 = list2   赋值操作，对原列表操作会影响赋值列表

sort函数：对列表就行排序,排序算法只能用于同数据类型
list.sort(reverse = True) 倒序排列，没有参数则升序排列

count函数：统计某个元素在列表中出现次数 与字符串同样,没有则为0
list.count(要统计的元素，开始位置，结束位置)  开始，结束位置可省略