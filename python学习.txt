1. 注释：
单行注释：# 快捷键ctrl+/
多行注释
'''
多行注释
'''

2.变量：可以发生改变的值
变量的命名规范：
  1.必须是字母或数字或下划线组成
  2.不能是数字开头或纯数字
  3.不要用中文
  4.不能用python关键字(if，for,while,break等)
  5.不要太长
  6.要有意义
  7.推荐使用下划线或驼峰命名
弱语言：变量命名的时候对数据类型不是很严格
格式：变量名 = 值
A,B,C = 1,2,3 多变量赋值，一般不建议这么用
A = B = C = 2

3.python代码可以随便点，不用加分号;python的数据类型不用明确写出来
  python代码的判断仅仅根据你代码放的位置
  如：只打印一次s
  i = 1
  s = 0
  while(i<=100):
      s = s + i
      i = i + 1
  print(s)
  打印100次s
  i = 1
  s = 0
  while(i<=100):
      s = s +
      i = i + 1
      print(s)

4.常量
  1.所有字母都用大写，认为是常量(不存在决定意义的常量)

5.数据类型：用于区分不同的数据
数字（int,float） a = 10; b = 3.14;c = -1.5
文字（char） s = 'as' s = "sa" s = '''sss''' #多行字符串
+ 左右两边都是字符串，连接字符串
* 字符串*数字，标识字符串重复的次数
布尔（bool） True，False   a = True

6.最简单的用户交互
a = int(input('提示语')) #输入
input输入的数据一定是字符串
print("字符串",变量)
type(a) #用type展示变量类型
数据类型(变量)  #强制类型转换

7.缩进 tab健

8.多行语句  (换行要加\)(有括号括起来可以不加\)
d = a + \
    b + \
    c

9.引号
a = "123"  单行字符串
a = '123'  单行字符串
a = """    多行字符串
abc
abc
abc
"""

10.python转义符
\n:换行
\t:制表符
\r:覆盖
\b:删除
\:两个反斜线表示一个\
原字符：使转义字符不起作用，写在前面 用r或R
\+符号：表示是符号作用失效，只作为一个字符串 \"

11.数字运算
2//4 向下取整
7%3 取余
2**2 乘方结果

12.比较运算符
>,>=,<,<=,!=,==

13.and,or,not
and 与 or 或 not 非 配合True，False使用

14.空值 None 单独存在的数据类型
print内置函数返回值为None

15.字符串操作  字符串下标从0开始
切片：[开始:结尾:步长] 取左不娶右，用下标表示，都可省略，开始默认从0开始，结尾默认到尾，步长默认为1，开始结尾可为负数
str[-3:-1] 取倒数第三个到倒数第一个字符
str[-1] 取倒数第一个字符
str[0] 取第一个字符
str[:] 取全部
str[::-1] 反转字符串
str[-3:-1,6] 步长过长就会取切片后的第一个字符

字符串拼接：
str1 + str2
','.join((str1,str2)) 在字符串中添加,号拼接

字符串格式化： 将format的值填入前面的大括号，大括号可加下标，可省略，则跟后面一一对应填入；加下标则为定位填入
str = "大家好，我的名字是{0},今年{1}岁，性别{2}".format("haha","18","男")

find方法：查找第一次出现的字符串位置，找不到返回-1
str.find("要找的字符串",开始，结尾) 开始结尾可省略

count方法：统计字符串出现的次数，没有返回0
str.count("要计数的字符串",开始，结尾)

replace方法：将要替换的字符串替换成对应字符串
str.replace('要替换的片段','替换成的字符串',替换次数) 替换次数可省略，默认全部替换

lower,upper方法：
str.upper()
str.lower()

split方法：指定分割点对字符串进行分割，得到一个列表,分割点去掉
str.split("分割点",分割次数) 分割次数可省略，默认要全部分割

strip方法：去除首尾空格
str.strip() 去除首尾空格
str.strip("字符串") 去除首尾指定字符串

占位符：%s 任何数据 %d 整型 %f 浮点型
str = 'wo%sni' % 'ai'
str = 'wo%sni' % [2,3]
str = 'score is %d' % 100

F表达式：与format表达式可通用
name = 'haha'
age = '18'
sex = '男'
str = "大家好，我的名字是{0},今年{1}岁，性别{2}".format(name,age,sex)
str = f'大家好，我的名字是{name},今年{age}岁，性别{sex}'

len():字符串长度

format格式化输出：
print('money is {下标:.2f}'.format(浮点数1,浮点数2)  将浮点数保留两位小数输出，下标可省略，默认取第一个浮点数
print('money is {下标:.2%}'.format(浮点数1,浮点数2)  将浮点数保留两位小数按百分比格式输出，下标可省略，默认取第一个浮点数

字符串*数字n：将字符串重复n次

16.列表
# 定义列表：
list1 = [2,3,4,'www',[10,20,30]]
# 列表下标：从0开始
print(list1[i][j])  取列表中嵌套的列表的数据
# 列表长度：
print(len(list1))
# 列表更新值,重新赋值
list[i] = new

# 列表的操作
加法：两个列表合并成一个列表
乘法：列表*数字n；列表值重复n次

列表的切片取值
list1[初始:结尾:步长] 与字符串取值逻辑一样

del关键字：删除  在计算机内存中删除指定值
a = [1, 2, 3]
del a[i]  删除指定的值

append方法：在列表末尾添加元素
list.append(添加元素)

insert方法：
list.insert[位置,元素] 将元素插入到对应的位置

clear 清空列表
list.clear()

remove函数：
list.remove(要移除的元素) 只会移除第一个匹配到的值

pop函数：
list.pop(下标) 移除指定下标的值，返回要移除的值

index函数：返回匹配到的下标值 找不到会报错
list.index(要查找的元素，查找起始位置，查找结束位置)  起始位置，结束位置可以省略

reverse函数：列表反向排序

extend方法：在列表后添加另一个列表，将新添加的列表元素一个个加入到原列表
list.extend(列表)

copy函数：对原表操作不会对复制表产生影响
list1 = list2.copy()  复制一份列表
list1 = list2   赋值操作，对原列表操作会影响赋值列表

sort函数：对列表就行排序,排序算法只能用于同数据类型
list.sort(reverse = True) 倒序排列，没有参数则升序排列

count函数：统计某个元素在列表中出现次数 与字符串同样,没有则为0
list.count(要统计的元素，开始位置，结束位置)  开始，结束位置可省略

17.元组
元组是一种数据容器，使用小括号表示，元组是不可变的，元组的数据类型可以不统一,操作与列表基本一样，但是元组元素不可修改
t = ('hello',66,,-20,[10,20,30])

元组的拼接
t1 + t2 直接拼接即可

注意事项：
1) 元组括号可以省略  a = 10,20,30
2) 元组中只有元素，得加,号 a = (10,)
3) 元组 * 数字n就是把元组元素重复n次

18，元组/列表/字符串的共同操作
len() 长度   max()  最大值 min() 最小值

19. 集合：一般用于列表/元组/字典/字符串中的元素去重，集合默认去重(先写一个列表/元组/字符串/字典，然后set一手就会自动去重)
创建集合：
方法一：set方法  字符串/列表/元组/字典
a = set('1234')   {'1', '4', '3', '2'}
b = set([10,20,30]) {10, 20, 30}
c = set((1,2,3,4))  {1, 2, 3, 4}
# 字典
d = {
    "年龄":18,
    "名字":"cj"
}
f = set(d)  {'年龄', '名字'}
e = set()  空集合
方法二：直接大括号赋值  元组/字符串/数字(不可以直接赋值列表)
aa = {(1,2,3),1,'ww'}

集合添加元素的方法
方法一：add()  数字/字符串/元组
a.add(元素b)  往a集合增加元素b
方法二：update  将集合合并
a.add(b) 将b集合合并到a集合，随机排列

集合删除元素的方法
a.remove(元素b) 元素b有直接删除，没有就会报错
a.pop() 随机删除一个元素，没有就会报错
a.discard(元素b) 元素b有直接删除，没有就不做任何操作

集合的交集和并集
s1 & s2 取s1和s2的交集
s1 | s2 取s1和s2的并集

20.字典
字典是一种映射类型，元素是键值对，字典的键必须是不可变类型，且不能重复(如果键重复，则会保留最后一个)，键额可以是任意不可变类型(元组/字符串/数字)
d = {
    "姓名":'cj',
    "年龄":18,
    1:2,
    (1,2,3):'123'
    "技能":{
         "技能1":python,
         "技能2":java
    }
}
b = dict((["年龄",18],["名字","cj]))  元组中套列表
c = {} # 直接写大括号 表达的是字典

字典增删改查  用[]进行匹配
字典增加:
d["技能"] = "python"
字典删除:
del d["技能"]
字典修改:
d["名字"] = 'als'
字典查找:
print(d["年龄"])

字典的get方法和keys方法
r = d.get("名字","赋值默认值")  获取对应的键值，没有就返回赋值默认值，对原字典不会修改；默认值可省略，不存在则返回None
f = d.keys()  获取所有键的名字，以列表的方式返回

item函数和values函数
r = d.items() 返回字典的所有键值对，列表方式输出整体，里面每一个键值对是元组方式
r = d.values() 返回字典的所有键值，列表方式输出

clear函数和copy函数
d.clear()  清空字典
f = d.copy(d)  复制字典副本

fromkeys函数和pop函数
fromkeys: 会返回一个新字典作为出参
第一个参数是一个序列(列表/元组/集合),用于作为字典的键，
第二个参数可以是任何数据类型，作为每个键的值(作为一个整体赋值给前面每一个键)
d1 = d.fromkeys(("名字","年龄"),(1,2))
pop 移除指定键，返回键值
d.pop("名字")

popitem函数和setdefault函数
d.popitem() 删除最后一个键值对，并且已元组的格式返回
d.setdefault(键,值)  字典中增加对应的键值对，如果存在就不会做任何操作

update函数：将字典2添加到字典1中，如果字典2存在重复的键，则会对字典1进行修改
d1.update(d2)

21.成员检测 in与not in
判断对象是否在序列(列表/字符串/元组/字典)中，如果存在就返回True
print("姓名" in {"名字","cj"})  对于字典，只能判断键是否存在，无法判断键值
1 in (1，2，3，4)
1 in [1,2,3,4]

22.判断是否相同 is/is not,返回True，False
数字/字符串/元组 不可变数据类型 长得一样，就是同一个对象
列表/字典/集合   可变数据乐星  长得一样，其实不是同一个对象
1 is 2
2 is 2

23.条件判断
  if 条件1:
     代码1
  elif 条件2:
     代码2
  elif 条件3:
     代码3
  else:
     代码4

24.python数据类型转换
检测元素的数据类型:
tuple 元组类型 set 集合类型 dict 字典类型
type(值/变量)

str():将其他类型数据转化为字符串类型(所有类型都可以进行转换)

int()/float():将其他类型转化为整型/浮点型(数字类型之间可相互转化，字符串类型可转化为整型，但是值必须是数字)
float -> int 3.14 -> 3 直接进行取整运算
bool -> int/float True -> 1/1.0  False -> 0/0.0
str -> int 只能是整数
str -> float 可带小数点.

bool() 将其他类型转化为True，False
容器集合：字符串，列表，元组，集合，字典(容器不为空，返回True，容器为空，返回False）
非容器集合：整型，浮点型，布尔型

list() 将其他类型转化为列表类型
int/float/bool -> list 非容器类型不能转化为列表
str -> list 每个字符当成列表元素
tuple -> list 元组中每个元素当成列表元素
dict -> list  字典中的键当成列表元素
set -> list   集合中的元素当成列表元素(随机顺序)(原因是集合中元素顺序就是随机的)

tuple() 将其他类型转化为元组类型    --> 通列表规则
set()  将其他类型转化为集合类型     --> 通列表规则，但是转化后元素是无序的

dict() 将其他类型转化为字典类型
int/float/bool/str/set -> dict 不可转化
list -> dict 列表必须是等长二级容器 a = [[1,2],[3,4],[5,6]]  列表套列表
tuple -> dict 元组必须是等长二级容器   a = ((1,2),('3','4'),(5,6))  元组套元组

isinstance() 用于判断一个对象是否是一个已知的类型 返回bool值
isinstance(元素/变量,(数据类型1,数据类型2,...))  --跟多个数据类型进行判断，满足其中一个就返回真

25.循环语句
while循环
     while 条件:
          循环代码
          if 条件:   == 用于判断左右是否相等
             break   跳出循环
             continue 跳出当前循环快中的剩余语句，然后继续进行下一次循环
          循环代码

for循环：用来遍历序列
for 变量 in 可迭代的东西(列表/元组/字符串/字典/集合): (对于字典只会访问键)(遍历数字用range)(内部自带自增)
    循环代码(可嵌套循环/判断)

tips:
for循环遍历字典的键和键值:
for i in d.items():
    print(i)   # 元组类型输出

range(m,n,q):从m数到n，不包含n（m可省略（省略时逗号也别要,省略时不可加步长），默认从0）,间隔为q（可省略，默认为1）
range(10):从0数到10

while True:（死循环）
    代码

25.pass 代码占位符，用于保持程序结构的完整性，不至于代码报错